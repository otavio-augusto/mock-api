#+title: /Controllers/
Estes são os /controllers/ do projeto.

Para entender a função dos /controllers/ no projeto, veja o seguinte:
#+begin_src plantuml :exports results :file .img/img1.png
@startuml
  component Model
  component View
  component Controller
  database Dados

interface response as "HTTP Response"
interface request as "HTTP Request"

component "Navegador" as navegador

navegador -> request: "     "
request --> Controller
Controller --> response
Model -> response: Serializa
response -> View: "     "
View -> navegador: Renderiza

Controller <-left-> Dados:"Read and Write"
@enduml
#+end_src
* User Controller
#+begin_src js :tangle userController.js
import { readData } from '../storage/storageDriver.js'
import { updateData, appendData, deleteData } from './controllerUtils.js'
#+end_src
** Rotas
*** DONE GET
Por sua natureza, devem existir duas rotas ~GET~, uma para retornar todos os usuários, e outro para retornar um especifico.

Essas rotas foram denominadas plural e singular, respectivamente.
#+begin_src js :tangle userController.js
//ROTA GET PLURAL
export async function getUsers(req, res, next) {
  const message = await readData("users.json")
  res.status(201).json(message);
};

//ROTA GET SINGULAR
export async function getUser(req, res, next) {
  const message = await readData("users.json")

  message.filter((item) => {
    if (req.params.id == item.id)
      res.status(201).send(item);
  })
};
#+end_src
*** DONE PUT
#+begin_src js :tangle userController.js
export async function putUser(req, res, next)  {
  await appendData("users.json", req.body)
  res.status(201).send("POST OK!");
};
#+end_src
*** DONE POST
#+begin_src js :tangle userController.js
export async function postUser(req, res, next) {
  await updateData("users.json", req.body)
  res.status(201).send("PUT OK!");
};
#+end_src
*** DONE DELETE
#+begin_src js :tangle userController.js
export async function deleteUser(req, res, next) {
  await deleteData("users.json", req.params.id)
  res.status(201).send("DELETE OK!");
};
#+end_src

* Theme Controller
** Rotas
*** TODO GET
#+begin_src js
export function getTheme(req, res, next){
  const id = req.params.id
  const message = {
    "message": "GET ACKNOWLEDGED!",
    "id": id
  }
  res.status(201).send(message);
}
#+end_src

* Funções Auxiliares
#+begin_src js :tangle controllerUtils.js
import { writeData, readData } from '../storage/storageDriver.js'
#+end_src
** DONE updateData
#+begin_src js :tangle controllerUtils.js
export async function updateData(fileName, childObject){
  const parentObject = await readData("users.json")

  for (let i = 0; i < parentObject.length; i++) {
      if(childObject.id == parentObject[i].id){
        parentObject[i] = childObject
        break;
      }
  }
  await writeData(fileName, parentObject)
  return true;
}
#+end_src
** DONE appendData
#+begin_src js :tangle controllerUtils.js
export async function appendData(fileName, childObject) {
  const parentObject = await readData(fileName)
  parentObject.push(childObject)
  await writeData(fileName, parentObject)
  return true;
}
#+end_src
** deleteData
#+begin_src js :tangle controllerUtils.js
export async function deleteData(fileName, childObjectId) {
  const parentObject = await readData(fileName)
  const newParentObject = parentObject.filter((item) => {return item.id != childObjectId})
  await writeData(fileName, newParentObject)
};
#+end_src
* COMMENT Metadados
#+PROPERTY: header-args :noeval
#+OPTIONS:
#+auto_tangle: t
# local variables:
# ispell-local-dictionary: "pt_BR"
# end:
